`ifndef _DECODER_V_
`define _DECODER_V_

module decoder (
	input [15:0] Iin,
	output reg [2:0] DR, SA, SB, FS, 
	output reg [5:0] IMM,
	output reg MB, MD, LD, MW
);

wire [3:0] OP;
wire [2:0] RS, RT, RD, FUNCT;

assign OP = Iin[15:12];
assign RS = Iin[11:9];
assign RT = Iin[8:6];
assign RD = Iin[5:3];
assign FUNCT = Iin[2:0]; 

always @ (*) begin
	case(OP)
		4'b0000: begin //NOP
			LD = 1'b0;
			MW = 1'b0;
		end			
		4'b1111: begin
			DR = RD;
			SA = RS;
			FS = FUNCT;
			MB = 1'b0;
			MD = 1'b0;
			LD = 1'b1;
			MW = 1'b0;
			if(FUNCT != 3'b010 & FUNCT != 3'b011 & FUNCT != 3'b100) begin
				SB = RT;
			end
		end
		4'b0010: begin
			DR = RT;
			SA = RS;
			IMM = {RD, FUNCT};
			MB = 1'b1;
			MD = 1'b1;
			LD = 1'b1;
			MW = 1'b0;
		end
		4'b0100: begin
			SA = RS;
			IMM = {RD, FUNCT};
			SB = RT;
			MB = 1'b1;
			LD = 1'b0;
			MW = 1'b1;
		end
		4'b0101, 4'b0110, 4'b0111: begin
			DR = RT;
			SA = RS;
			IMM = {RD, FUNCT};
			MB = 1'b1;
			MD = 1'b0;
			LD = 1'b1;
			MW = 1'b0;
		end					
					
	endcase
end

endmodule
		

`endif /* _DECODER_V_ */