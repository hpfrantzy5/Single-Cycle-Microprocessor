`ifndef _LAB_5_IRAM_CUSTOM_V_
`define _LAB_5_IRAM_CUSTOM_V_

`include “constants.v”

module lab5iram_custom
(
  input         CLK,
  input         RESET,
  input  [ 7:0] ADDR,
  output [15:0] Q
);

  reg  [15:0] mem [0:127]; // Instruction memory with 16 bit entries.
  wire [ 6:0] SADDR;
  integer     i;

  assign SADDR = ADDR[7:1];
  assign Q     = mem[SADDR];

  always @ ( posedge CLK )
  begin
if ( RESET ) begin
		mem[0] <= {`RTYPE, `REG0, `REG0, `REG0, `SUB};
		mem[1] <= {`RTYPE, `REG1, `REG1, `REG1, `SUB};
		mem[2] <= {`RTYPE, `REG2, `REG2, `REG2, `SUB};
		mem[3] <= {`RTYPE, `REG3, `REG3, `REG3, `SUB};
		mem[4] <= {`LB, `REG0, `REG1, 6'b000111};
		mem[5] <= {`ANDI, `REG1, `REG2, 6'b000001};
		mem[6] <= {`ANDI, `REG1, `REG3, 6'b000010};
		mem[7] <= {`BEQ, `REG2, `REG3, 001000}	
		mem[8] <= {`BNE, `REG2, `REG3, 001000}
		mem[9] <= {`SB, `REG0, `REG2, 111010}
		mem[10] <= {`SB, `REG0, `REG2, 111011}
		mem[11] <= {`NOP, `REG0, `REG0, `REG0, `HALT} 
		mem[12] <= {`ADDI, `REG2, `REG2, 110110}
		mem[13] <= {`BGEZ, `REG2, `REG2, 001000}
		mem[14] <= {`BLTZ, `REG2, `REG2, 001000}
		mem[15] <= {`SB, `REG0, `REG2, 111100}
		mem[16] <= {`SB, `REG0, `REG2, 111101}
      
		for(i = 17; i < 128; i = i + 1)
      	mem[i] <= 16'b0000000000000000;
     end
  end

endmodule

`endif /* _LAB_5_IRAM_CUSTOM_V_ */

